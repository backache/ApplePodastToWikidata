#Get  URL
#http://itunes.apple.com/lookup?id=1411257149
$Q = 'Q110575475','Q110575472','Q110575473','Q110575478','Q110575479','Q110575476','Q110575477','Q110575482','Q110575483','Q110575480','Q110575487','Q110575484','Q110575485','Q110575491','Q110575488','Q110575489','Q110575494','Q110575495','Q110575493','Q110575498','Q110575499','Q110575496','Q110575497','Q110575502','Q110575500','Q110575501','Q110575506','Q110575505','Q110580102','Q110580150','Q110580151','Q110580149','Q110580154','Q110580155','Q110580153','Q110580158','Q110580159','Q110580156','Q110580157','Q110580162','Q110580163','Q110580160','Q110580161','Q110580166','Q110580167','Q110580164','Q110580165','Q110580170','Q110580171','Q110580168','Q110580169','Q110580174','Q110580175','Q110580172','Q110580173','Q110580178','Q110580179','Q110580176','Q110580177','Q110580182','Q110580183','Q110580181','Q110580184','Q110580320','Q110580398','Q110580446','Q110580974','Q110580985','Q110581025','Q110581080','Q110581229','Q110581818','Q110581823','Q110581821','Q110581827','Q110597510','Q110612073','Q110617734','Q110623729','Q110652766','Q110657688','Q110682649','Q110732542','Q110738459','Q110763913','Q110772791','Q110777804','Q110785392','Q110819613','Q110820658','Q110821225','Q110829573','Q110854779','Q110879130','Q110930671','Q110932967','Q110932983','Q110944977','Q110946233','Q110969640','Q110970577','Q110972949','Q111015725','Q111016687','Q111019758','Q111034118','Q111043029','Q111080743','Q111136186','Q111149454','Q111161112','Q111197610','Q111207445','Q111211375','Q111212660','Q111212951','Q111214952','Q111215049','Q111243850','Q111269998','Q111272218','Q111281025','Q111306516','Q111324673','Q111326459','Q111334943','Q111335872','Q111340451','Q111343131','Q111383156','Q111383733','Q111456819','Q111457170','Q111461299','Q111470789','Q111475749','Q111479353','Q111507014','Q111523798','Q111544194','Q111584964','Q111589365','Q111638907','Q111667822','Q111751388','Q111777218','Q111792305','Q111804049','Q111804480','Q111906154','Q111944132','Q111945072','Q111950209','Q111951424','Q111958396','Q111969632','Q111990074','Q112033461','Q112055276','Q112075061','Q112081549','Q112128338','Q112178238','Q112208938','Q112234091','Q112262407','Q112537167','Q112571448','Q112626819','Q112671848','Q112679842','Q112704967','Q112914079','Q112944957','Q112945294','Q112945386','Q112945408','Q112945450','Q112945493','Q112945522','Q112946348','Q112946674','Q112978133','Q113048544','Q113090066','Q113110864','Q113111864','Q113337465','Q113459234','Q113459327','Q113459371','Q113523134','Q113559001','Q113559381','Q113646360','Q113667988','Q113853791','Q113882514','Q113909298','Q113915999','Q113950221','Q113990365','Q113995005','Q114036929','Q114170145','Q114245090','Q114279033','Q114290446','Q114387587','Q114406644','Q114434773','Q114458143','Q114495991','Q114614767','Q114774266','Q114974802','Q114985059','Q115007463','Q115007687','Q115009398','Q115014918','Q115015317','Q115117397','Q115119039','Q115120813','Q115130175','Q115210613','Q115325114','Q115328901','Q115360099','Q115380016','Q115431204','Q115445230','Q115460532','Q115468732','Q115472582','Q115536370','Q115543099','Q115565395','Q115777082','Q115777083','Q115777081','Q115777086','Q115777087','Q115777084','Q115777085','Q115777090','Q115777088','Q115777089','Q115777094','Q115777095','Q115777092','Q115777093','Q115777098','Q115777099','Q115777096','Q115777097','Q115777102','Q115777103','Q115777100','Q115777101','Q115777106','Q115777107','Q115777105','Q115777110','Q115777111','Q115777108','Q115777109','Q115777114','Q115777115','Q115777113','Q115777119','Q115777116','Q115777117','Q115805050','Q115860866','Q115862272','Q115903371','Q115921121','Q115923949','Q116044845','Q116055413','Q116201052','Q116235345','Q116263835','Q116264326','Q116431636','Q116448020','Q116455459','Q116455462','Q116455463','Q116455460','Q116455461','Q116455466','Q116455467','Q116455464','Q116455465','Q116455470','Q116455471','Q116455469','Q116455472','Q116502322','Q116626451','Q116685577','Q116695523','Q116697925','Q116740119','Q116740122','Q116740123','Q116740120','Q116740121','Q116740126','Q116740127','Q116740124','Q116740125','Q116740130','Q116740131','Q116740129','Q116740134','Q116740135','Q116740132','Q116740133','Q116740138','Q116740139','Q116740136','Q116740137','Q116740142','Q116740143','Q116740140','Q116740141','Q116740147','Q116740144','Q116740145','Q116741115','Q116780750','Q116785919','Q116785950','Q116785961','Q116785968','Q116785982','Q116785981','Q116786010','Q116786015','Q116786054','Q116786061','Q116786064','Q116786075','Q116786073','Q116786077','Q116786252','Q116786264','Q116786291','Q116786299','Q116786309','Q116786343','Q116786352','Q116813766','Q116864584','Q116864999','Q116872364','Q116880085','Q116893823','Q116897449','Q116897466','Q116897472','Q116907444','Q116907491','Q116921808','Q116922138','Q116923099','Q116947371','Q116947698','Q116948052','Q116949489','Q117035891','Q117191036','Q117194018','Q117222524','Q117266182','Q117288934','Q117301847','Q117304858','Q117314793','Q117314845','Q117314850','Q117314855','Q117314867','Q117314875','Q117314937','Q117314966','Q117315061','Q117315069','Q117315138','Q117315383','Q117315446','Q117324423','Q117324539','Q117327964','Q117328321','Q117338295','Q117349405','Q117349449','Q117352057','Q117359304','Q117382625','Q117382671','Q117382803','Q117382859','Q117443550','Q117539815','Q117756822','Q117787064','Q117804081','Q117821489','Q117832729','Q118140396','Q118196889','Q118210449','Q118213523','Q118447912','Q118560903','Q118640309','Q118713181','Q118793072','Q119057839','Q119081661','Q119090366','Q119104490','Q119380060','Q119382319','Q119385083','Q119389675','Q119726889','Q119729468','Q119820175','Q119996851','Q120019676','Q120102839','Q120186998','Q120187115','Q120262876','Q120484662','Q120484715','Q120484972','Q120485429','Q120485457','Q120485541','Q120488888','Q120491376','Q120767408','Q120947566','Q120966982','Q121078949','Q121300408','Q121339057','Q121339233','Q121438797','Q121463874','Q121535608','Q121563597','Q121760876','Q121818395','Q121832240','Q121841087','Q122224794','Q122375807','Q122451241','Q122585278','Q122633013','Q122633026','Q122676653','Q122721944','Q122723366','Q122781688','Q122920287','Q122969915','Q123004002','Q123012627','Q123026299','Q123150004','Q123157894','Q123158035','Q123158041','Q123167116','Q123179100','Q123179136','Q123198821','Q123200168','Q123237894','Q123239829','Q123245179','Q123273180','Q123273252','Q123273300','Q123281075','Q123281872','Q123282026','Q123282749','Q17495','Q41984'

#$QID ="Q83060868"
#to do
# get the podcast logo URL and put it in P10286
# take <itunes:category text="Education"> and set it as genre
# get <link> and make it official website
$errstring=''
$debgstring=''
function Send-Wikidata {

    param (
        $QID
    )
    $out =""

    #Retrieve the wikidata item and put in a variable called WD then show me what you got
    $Response = Invoke-WebRequest -Uri "https://wikidata.org/w/rest.php/wikibase/v0/entities/items/$QID" -UseBasicParsing
    If ($Response.StatusCode -ne "200") {
        # WD failed to respond.
        Write-Host "Message: $($Response.StatusCode) $($Response.StatusDescription)"
    }

    #Make a dictionary of the response from Wikidata
    $WD = $response | ConvertFrom-Json
    #$WD
    #if more than one $URL=$WD.statements.p1019.value.content[1]
    #if just one $URL=$WD.statements.p1019.value.content
   
    #From the WIkidate Dictionary  extra the value of the newest web feed URL
    $APPLEID=$WD.statements.p5842.value.content | Sort-Object -Property ID| Select-Object -first 1
    $URL = 'http://itunes.apple.com/lookup?id='+$APPLEID

    # Go and get Apple's data
    try {
        $Response = Invoke-WebRequest -Uri "$URL" -UseBasicParsing -ContentType "application/xml"

        $Feed =$Response.Content| ConvertFrom-Json 

        [datetime]$date=get-date
        $datestr = $date.ToString("yyyy-MM-dd")
        [datetime]$releasedate = $feed.results.releasedate
        $releasedatestr = $releasedate.ToString("yyyy-MM-dd")
        $span=new-timespan -Start $feed.results.releasedate -End $date
        if ($span.Days -gt 365) {$out = "%7C%7C$QID%7CP582%7C%2b$($releasedatestr)T00:00:00Z%2F11%7CP585%7C%2b$($datestr)T00:00:00Z%2F11%7CS248%7CQ70058728%7CP813"}
        #get the largest number of podcasts the wididata entry has
        $AppleAmount=$Feed.Results.trackCount
        $BiggestWDamount=0
        ForEach ($CountEntry in $WD.statements.p1113.value.content.amount) {
    
            if ($CountEntry.length -gt 0) {$currentcount = $CountEntry.Substring(1)}
            if ($currentcount -gt $BiggestWDamount) {$BiggestWDamount=$currentcount} 
         }
        if ($AppleAmount -gt $BiggestWDamount) {$out = "%7C%7C$QID%7CP1113%7C$AppleAmount%7CP585%7C%2b$($datestr)T00:00:00Z%2F11%7CS248%7CQ70058728%7CP813%7C%2b$($datestr)T00:00:00Z%2F11"}
 
        if ($WD.statements.p10286.value.content.length -eq 0){
            #   Write-Output "set it"
               $logoURL=$feed.Results.artworkUrl600
               if ($logoURL.length -eq 0){$logoURL=$feed.Results.artworkUrl300}
               if ($logoURL.length -eq 0){$logoURL=$feed.Results.artworkUrl100}
               if ($logoURL.length -eq 0){$logoURL=$feed.Results.artworkUrl60}
               if ($logoURL.length -eq 0){$logoURL=$feed.Results.artworkUrl30}
               if ($logoURL.length -gt 0){
               $logoURLencoded=[System.Web.HTTPUtility]::UrlEncode($logoURL)
               $out += "%7C%7C$QID%7CP10286%7C%22$logoURLencoded%22%7CS248%7CQ70058728%7CP813"}
           }

           if ($WD.statements.p1019.value.content.length -eq 0){
            #   Write-Output "set it"
               $rssURL=$feed.Results.feedUrl
               if ($rssURL.length -gt 0){
               $rssURLencoded=[System.Web.HTTPUtility]::UrlEncode($rssURL)
               $out += "%7C%7C$QID%7CP1019%7C%22$rssURLencoded%22%7CS248%7CQ70058728%7CP813"}
           }



    #       $output = "https://quickstatements.toolforge.org/#/v1="
   #$output = $output + $out
   #Start-Process "chrome.exe" "$output"
        
    }
    catch {$errstring+="Cannot download podcast feed for $QID"
} 
    return $out
}
#$out += "%7C%7C$QID%7CP1019%7C$URL%7CP2241%7C$Q1193907"
$output = "https://quickstatements.toolforge.org/#/v1="
$spawncount=0
$ratelimitcount=0
foreach ($Qitem in $Q) {
    $ratelimitcount=$ratelimitcount+1
    $spawncount=$spawncount+1
    $itemoutput = Send-Wikidata($Qitem)
    $output = $output + $itemoutput
    $ratelimitcount

    if ($ratelimitcount -eq 20) {Start-sleep -seconds 60
        $ratelimitcount=0}
   if ($output.length -gt 3000) {Start-Process "chrome.exe" "$output"
   $output = "https://quickstatements.toolforge.org/#/v1="
            $spawncount=0}
            
}
       Start-Process "chrome.exe" "$output"
$output
#   Start-Process "chrome.exe" "$output"
